name: Build and Release

on:
  push:
    branches:
      - main
    tags-ignore:
      - '*'

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write
    outputs:
      new_version: ${{ steps.get_version.outputs.new_version }}
      release_notes: ${{ steps.generate_release_notes.outputs.release_notes }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0
          fetch-tags: true

      - name: Get Latest Tag and Git Log
        shell: bash
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0)
          echo "Latest Tag: $LATEST_TAG"
          
          GIT_LOG=$(git log "${LATEST_TAG}..HEAD" --no-merges --oneline)
          echo "Git Log:"
          echo "$GIT_LOG"
          
          echo "GIT_LOG<<EOF" >> $GITHUB_ENV
          echo "$GIT_LOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Display Git Log
        shell: bash
        run: |
          echo "Git Log since last tag:"
          echo "$GIT_LOG"

      - name: Generate Release Notes
        id: generate_release_notes
        shell: bash
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          if [ -z "$GIT_LOG" ]; then
            echo "Error: Git log is empty. Cannot generate release notes."
            exit 1
          fi

          # Install jq if not available
          if ! command -v jq &> /dev/null; then
            echo "jq not found, installing..."
            sudo apt-get update && sudo apt-get install -y jq
          fi

          # Prepare the prompt for OpenAI
          PROMPT="Generate professional release notes based on the following Git log:\n\n$GIT_LOG"

          # Create JSON payload
          JSON_PAYLOAD=$(jq -n --arg model "gpt-4" \
            --arg prompt "$PROMPT" \
            '{
              "model": $model,
              "messages": [
                {
                  "role": "system",
                  "content": "You are a helpful assistant specializing in creating user-friendly release notes for open-source applications, specifically games and clip recorders. Your task is to take raw update information and organize it into well-structured, clear, and professional release notes tailored for the applications users. Ensure that the release notes include only the following sections: New Features: Briefly describe any new functionalities or features added to the application. Improvements: Highlight enhancements made to existing features or overall performance. Bug Fixes: List any issues that have been resolved or minor fixes applied. Use Markdown formatting for readability and consistency. The section titles should not include ":".  Maintain a friendly and approachable tone suitable for the applications user community. Ensure the release notes are concise and easy to understand for regular users, avoiding unnecessary technical jargon. Skip any information irrelevant to users, such as development-specific updates or detailed pipeline changes, and replace such items with a general mention of minor fixes if necessary. Prioritize clarity and simplicity to help users quickly understand the updates and changes in the new release. The release notes should not include any additional messages, such as Thank you for using our application."
                },
                {
                  "role": "user",
                  "content": $prompt
                }
              ]
            }')

          # Call OpenAI API
          RESPONSE=$(curl -s -X POST "https://api.openai.com/v1/chat/completions" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -d "$JSON_PAYLOAD")

          # Extract release notes using jq
          RELEASE_NOTES=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')

          # Check if release notes are empty
          if [ -z "$RELEASE_NOTES" ] || [ "$RELEASE_NOTES" == "null" ]; then
            echo "Error: Release notes generation failed or returned empty."
            exit 1
          fi

          echo "Release notes:"
          echo "$RELEASE_NOTES"

          # Set release_notes as output
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Determine Version
        id: get_version
        run: |
          $tags = git tag
          if ($tags -ne $null -and $tags.Count -gt 0) {
            $latestTag = (git describe --tags --abbrev=0 2>$null) -replace '^v', ''
            if (-not $latestTag) {
              $latestTag = "0.0.0"
            }
          } else {
            $latestTag = "0.0.0"
          }
          $latestTag = [string]$latestTag
          $versionParts = $latestTag.Split('.')
          $major = [int]$versionParts[0]
          $minor = [int]$versionParts[1]
          $patch = [int]$versionParts[2]
          $patch++
          $newVersion = "$major.$minor.$patch"
          echo "new_version=$newVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8
          echo "new_version=$newVersion" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Configure Git User
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
        shell: pwsh

      - name: Install vpk as .NET Global Tool
        run: |
          dotnet tool install -g vpk
          $env:PATH += ";$env:USERPROFILE\.dotnet\tools"
        shell: pwsh

      - name: Install Frontend Dependencies
        working-directory: ./Frontend
        run: npm install
        shell: pwsh

      - name: Build Frontend
        working-directory: ./Frontend
        run: npm run build
        shell: pwsh

      - name: Move Frontend Build to Resources/wwwroot
        run: |
          $source = "./Frontend/dist"
          $destination = "./Resources/wwwroot"
          if (-Not (Test-Path -Path $destination)) { New-Item -ItemType Directory -Path $destination -Force }
          Remove-Item -Path "$destination\*" -Recurse -Force
          Copy-Item -Path "$source\*" -Destination $destination -Recurse -Force
        shell: pwsh

      - name: Build the App
        run: dotnet build --configuration Release
        shell: pwsh

      - name: Publish the App
        run: dotnet publish -c Release --self-contained -r win-x64 -o publish
        shell: pwsh

      - name: Package with vpk
        run: vpk pack -u ReCaps -v ${{ env.new_version }} -p ./publish -e ReCaps.exe -o ./output --packTitle "ReCaps" --noPortable
        shell: pwsh

      - name: Create a Git Tag
        run: |
          git tag v${{ env.new_version }}
          git push origin v${{ env.new_version }}
        shell: pwsh

      - name: Upload Release Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ReCaps
          path: ./output

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: ReCaps

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.build.outputs.new_version }}
          release_name: Release v${{ needs.build.outputs.new_version }}
          body: ${{ needs.build.outputs.release_notes }}
          draft: false
          prerelease: false

      - name: Upload Setup File
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ReCaps-win-Setup.exe
          asset_name: ReCaps-win-Setup.exe
          asset_content_type: application/octet-stream

      - name: Upload RELEASES File
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./RELEASES
          asset_name: RELEASES
          asset_content_type: text/plain

      - name: Upload releases.win.json
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./releases.win.json
          asset_name: releases.win.json
          asset_content_type: application/json

      - name: Upload assets.win.json
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./assets.win.json
          asset_name: assets.win.json
          asset_content_type: application/json

      - name: Upload nupkg
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ReCaps-${{ needs.build.outputs.new_version }}-full.nupkg
          asset_name: ReCaps-${{ needs.build.outputs.new_version }}-full.nupkg
          asset_content_type: application/json
