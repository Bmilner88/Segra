name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Checkout Submodules
        run: |
          git submodule sync --recursive
          git submodule update --init --recursive

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'

      - name: Determine Version
        id: get_version
        run: |
          # Fetch all tags
          git fetch --tags

          # Check if there are any tags
          $tags = git tag
          if ($tags -ne $null -and $tags.Count -gt 0) {
            # Get the latest tag and ensure it's a single string
            $latestTag = (git describe --tags --abbrev=0 2>$null) -replace '^v', ''
            if (-not $latestTag) {
              $latestTag = "0.0.0"
            }
          } else {
            # Fallback to 0.0.0 if no tags exist
            $latestTag = "0.0.0"
          }

          # Ensure $latestTag is a string
          $latestTag = [string]$latestTag

          # Split the version into components
          $versionParts = $latestTag.Split('.')
          $major = [int]$versionParts[0]
          $minor = [int]$versionParts[1]
          $patch = [int]$versionParts[2]

          # Increment the patch version
          $patch++

          # Combine into new version
          $newVersion = "v$major.$minor.$patch"

          # Output the new version
          echo "new_version=$newVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8
        shell: pwsh



      - name: Build the App
        run: |
          dotnet build --configuration Release

      - name: Publish the App
        run: |
          dotnet publish -c Release --self-contained -r win-x64 -o publish

      - name: Package with vpk
        run: vpk pack -u dev.segergren.recaps -v ${{ env.new_version }} -p ./publish -e ReCaps.exe

      - name: Create a Git Tag
        run: |
          # Tag the repository with the new version
          git tag ${{ env.new_version }}
          git push origin ${{ env.new_version }}

      - name: Upload Release Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ReCaps
          path: ./publish

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: ReCaps

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.new_version }}
          release_name: Release ${{ env.new_version }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./publish/ReCaps.exe
          asset_name: ReCaps.exe
          asset_content_type: application/octet-stream
