name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    permissions:
      contents: write

    outputs:
      new_version: ${{ steps.get_version.outputs.new_version }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Checkout Submodules
        run: |
          git submodule sync --recursive
          git submodule update --init --recursive

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Determine Version
        id: get_version
        run: |
          # Check if there are any tags
          $tags = git tag
          if ($tags -ne $null -and $tags.Count -gt 0) {
            # Get the latest tag and remove the leading 'v' if present
            $latestTag = (git describe --tags --abbrev=0 2>$null) -replace '^v', ''
            if (-not $latestTag) {
              $latestTag = "0.0.0"
            }
          } else {
            # Fallback to 0.0.0 if no tags exist
            $latestTag = "0.0.0"
          }

          # Ensure $latestTag is a string
          $latestTag = [string]$latestTag

          # Split the version into components
          $versionParts = $latestTag.Split('.')
          $major = [int]$versionParts[0]
          $minor = [int]$versionParts[1]
          $patch = [int]$versionParts[2]

          # Increment the patch version
          $patch++

          # Combine into new version without 'v' prefix to comply with vpk
          $newVersion = "$major.$minor.$patch"

          # Output the new version
          echo "new_version=$newVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8
          echo "new_version=$newVersion" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Configure Git User
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
        shell: pwsh

      - name: Install vpk as .NET Global Tool
        run: |
          # Install vpk globally
          dotnet tool install -g vpk

          # Add the .NET global tools path to the environment PATH
          $env:PATH += ";$env:USERPROFILE\.dotnet\tools"
        shell: pwsh

      - name: Install Frontend Dependencies
        working-directory: ./Frontend
        run: npm install
        shell: pwsh

      - name: Build Frontend
        working-directory: ./Frontend
        run: npm run build
        shell: pwsh

      - name: Move Frontend Build to Resources/wwwroot
        run: |
          # Define source and destination directories
          $source = "./Frontend/dist"         # Frontend build output directory
          $destination = "./Resources/wwwroot"

          # Create the destination directory if it doesn't exist
          if (-Not (Test-Path -Path $destination)) {
            New-Item -ItemType Directory -Path $destination -Force
          }

          # Remove existing contents in Resources/wwwroot to prevent leftover files
          Remove-Item -Path "$destination\*" -Recurse -Force

          # Copy the build files to Resources/wwwroot, overwriting existing files
          Copy-Item -Path "$source\*" -Destination $destination -Recurse -Force
        shell: pwsh

      - name: Build the App
        run: |
          dotnet build --configuration Release

      - name: Publish the App
        run: |
          dotnet publish -c Release --self-contained -r win-x64 -o publish

      - name: Package with vpk
        run: vpk pack -u ReCaps -v ${{ env.new_version }} -p ./publish -e ReCaps.exe -o ./output --packTitle "ReCaps"
        shell: pwsh

      - name: Create a Git Tag
        run: |
          git tag v${{ env.new_version }}
          git push origin v${{ env.new_version }}
        shell: pwsh

      - name: Upload Release Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ReCaps
          path: ./output

  release:
    needs: build
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: ReCaps

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.build.outputs.new_version }}
          release_name: Release v${{ needs.build.outputs.new_version }}
          draft: false
          prerelease: false

      - name: List Files in Current Directory
        run: ls -la
      
      - name: Upload Setup File
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ReCaps-win-Setup.exe
          asset_name: ReCaps-win-Setup.exe
          asset_content_type: application/octet-stream

      - name: Upload RELEASES File
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./RELEASES
          asset_name: RELEASES
          asset_content_type: text/plain

      - name: Upload releases.win.json
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./releases.win.json
          asset_name: releases.win.json
          asset_content_type: application/json

      - name: Upload assets.win.json
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./assets.win.json
          asset_name: assets.win.json
          asset_content_type: application/json

      - name: Upload nupkg
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ReCaps-${{ needs.build.outputs.new_version }}-full.nupkg
          asset_name: ReCaps-${{ needs.build.outputs.new_version }}-full.nupkg
          asset_content_type: application/json